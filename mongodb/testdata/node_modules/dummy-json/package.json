{
  "name": "dummy-json",
  "description": "Dummy JSON generator for Node.js",
  "version": "0.0.2",
  "homepage": "https://github.com/webroo/dummy-json",
  "author": {
    "name": "Matt Sweetman"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/webroo/dummy-json.git"
  },
  "main": "./dummy-json.js",
  "dependencies": {
    "handlebars": "~1.0.12"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "# Dummy JSON\n\nDummy JSON is a Node utility that allows you to generate random JSON data using Handlebars templates. It returns a JSON compatible string you can use in your app. It's useful for creating mock API services that return dummy data.\n\n## Example\n\nFor a complete list of helpers see the [available helpers](#available-helpers) section.\n\n<table><tr><td valign=\"top\" width=\"50%\">\nTemplate\n<pre>\n{\n  \"people\": [\n    {{#repeat 2}}\n    {\n      \"id\": {{index}},\n      \"firstName\": \"{{firstName}}\",\n      \"lastName\": \"{{lastName}}\",\n      \"email\": \"{{email}}\",\n      \"work\": \"{{company}}\",\n      \"age\": {{number 20 50}},\n      \"optedin\": {{boolean}}\n    }\n    {{/repeat}}\n  ],\n  \"images\": [\n    {{#repeat 3 6}}\n    'img{{index}}.png'\n    {{/repeat}}\n  ],\n  \"revision\": {{uniqueIndex}},\n  \"tolerance\": {{number '0' '2'}},\n}\n</pre>\n</td><td>\nOutput\n<pre>\n{\n  \"people\": [\n    {\n      \"id\": 0,\n      \"firstName\": \"Leanne\",\n      \"lastName\": \"Flinn\",\n      \"email\": \"leanne.flinn@unilogic.com\",\n      \"work\": \"Unilogic\",\n      \"age\": 26,\n      \"optedin\": true\n    },\n    {\n      \"id\": 1,\n      \"firstName\": \"Edward\",\n      \"lastName\": \"Young\",\n      \"email\": \"edward.young@solexis.com\",\n      \"work\": \"Solexis\",\n      \"age\": 31,\n      \"optedin\": false\n    }\n  ],\n  \"images\": [\n    'img0.png',\n    'img1.png',\n    'img2.png',\n    'img3.png'\n  ],\n  \"revision\": 0,\n  \"tolerance\": 1.7508240924216807,\n}\n</pre>\n</td></tr></table>\n\n## Getting started\n\nInstall via npm:\n\n    npm install dummy-json\n\n#### Generate JSON\n\n```js\nvar dummyjson = require('dummy-json');\nvar template = '{ \"name\": {{firstName}}, \"age\": {{number 18 65}} }';\nvar result = dummyjson.parse(template);\n```\n\n#### Generate from a file\n\nInstead of writing multi-line strings you can load the template from a file using Node's **fs** utility:\n\n```js\nvar fs = require('fs');\nvar dummyjson = require('./dummy-json');\n\nvar template = fs.readFileSync('template.hbs', {encoding: 'utf8'});\nvar result = dummyjson.parse(template);\n```\n\n#### Converting to JavaScript object\n\nIf there are no errors in the output then the returned string can be parsed into a JavaScript object:\n\n```js\nvar result = dummyjson.parse(template);\nvar obj = JSON.parse(result);\n```\n\n#### Using with a HTTP response\n\nA common use of Dummy JSON is to create a mock API service that return random data you can test with. Here's a quick example using Express:\n\n```js\nvar fs = require('fs');\nvar express = require('express');\nvar dummyjson = require('./dummy-json');\n\nvar template = fs.readFileSync('template.hbs', {encoding: 'utf8'});\nvar app = express();\n\napp.get('/people', function(req, res) {\n  res.set('Content-Type', 'application/json');\n  res.send(dummyjson.parse(template));\n});\n\napp.listen(3000);\n```\n\n## Available helpers\n\n#### `{{#repeat [count/array] [maxCount]}} ... {{/repeat}}`\n\nRepeats blocks of content. Similar to Handlebars' built-in `each`, but adds commas between items and tidies up whitespace.\n\n```js\n{{#repeat 4}} // Repeats the block exactly 4 times\n\"hello\"\n{{/repeat}}\n\n{{#repeat 5 10}} // Repeats the block a random number of times between 5 and 10\n\"hello\"\n{{/repeat}}\n\n{{#repeat animals}} // Loops over array provided in the data options of parse()\n\"{{this}}\"\n{{/repeat}}\n```\n\nYou can print the current index of the loop using `{{index}}`. This is a helper that's only available within `repeat` blocks, (outside of a `repeat` block it will print `undefined`).\n\n```js\n{{#repeat 4}}\n\"hello {{index}}\" // \"hello 1\", \"hello 2\", etc.\n{{/repeat}}\n```\n\n#### `{{number [min/max] [max] [pad=true]}}`\n\nGenerates a random number. If just one number is provided it will generate a number between 0 and the given number. The min and max values are inclusive in the generated number. Floats can be generated by wrapping the numbers in quote marks. The `pad` option pads the generated number with leading zeros (integers only).\n\n```js\n{{number 20}} // Generates a random integer between 0 and 20\n{{number 50 100}} // Generates a random integer between 50 and 100\n{{number 50 100 pad=true}} // Pad integer with leading zeros, eg: 076\n{{number '5.5' '8.5'}} // Generates a random float between 5.5 and 8.5\n```\n\n#### `{{boolean}}`\n\nGenerates a random `true` or `false` boolean value.\n\n#### `{{firstName}}`\n\nGenerates a random first name, from a predefined list.\n\n#### `{{lastName}}`\n\nGenerates a random last name, from a predefined list.\n\n#### `{{company}}`\n\nGenerates a random company name, from a predefined list.\n\n#### `{{email}}`\n\nGenerates a random email address, using the most recently printed name and company. This means it keeps in sync when used in conjunction with names and companies.\n\n#### `{{uniqueIndex}}`\n\nGenerates a unique index that always increments by 1 each time it's used, regardless of whether it's inside or outside a repeat loop.\n\n## Advanced usage\n\nThe `parse` method accepts a second argument that allows you to configure the parsing routine. It's a plain object that can contain one or more of the following options:\n\n### Using your own Handlebars helpers\n\n```js\nvar helpers = {\n  orientation: function(options) {\n    return Math.random() > 0.5 ? 'left' : 'right';\n  }\n};\nvar template = '{ \"position\": {{orientation}} }';\nvar result = dummyjson.parse(template, {helpers: helpers});\n```\n\nCustom helpers can override built-in ones, which allows you to modify how the Available helpers work. For more information on writing helpers see the [Handlebars documentation](http://handlebarsjs.com/block_helpers.html).\n\n### Using your own data\n\n```js\nvar data = {\n  animals: ['cat', 'dog', 'cow', 'wolf', 'giraffe']\n};\nvar template = '{ \"pets\": [ {{#repeat animals}}{{this}}{{/repeat}} ] }';\nvar result = dummyjson.parse(template, {data: data});\n```\n\nUseful for splicing bits of real data into the generated reponse. All the regular Handlebars functionality is available to work with the data.\n\n### Using your own list of names and companies\n\n```js\nvar firstNames = ['Frasier', 'Olivia', 'Marge', 'Holbeck'];\nvar lastNames = ['Crane', 'Dunham', 'Gunderson', 'Ghyll'];\nvar companies = ['KACL', 'Fringe', 'MPD'];\nvar template = '{ \"name\": {{firstName}}, \"company\": {{company}} }';\nvar result = dummyjson.parse(template, {\n  firstNames: firstNames,\n  lastNames: lastNames,\n  companies: companies\n});\n```\n\nUsing your own names and companies will completely override the built-in collections. You can specify just one array, or all of them, as has been done above. **Note:** Names and companies loop when used repeatedly - to keep them in sync the length of the *smallest* array will be used as the loop point. In the example above the `companies` array is smallest and so the final first and last names won't ever appear.",
  "readmeFilename": "README.md",
  "_id": "dummy-json@0.0.2",
  "dist": {
    "shasum": "09b7ebf3c4c0acb1c89d94f26d8814a1eced9787",
    "tarball": "http://registry.npmjs.org/dummy-json/-/dummy-json-0.0.2.tgz"
  },
  "_from": "dummy-json@",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "webroo",
    "email": "npm@webroo.org"
  },
  "maintainers": [
    {
      "name": "webroo",
      "email": "npm@webroo.org"
    }
  ],
  "directories": {},
  "_shasum": "09b7ebf3c4c0acb1c89d94f26d8814a1eced9787",
  "_resolved": "http://registry.npmjs.org/dummy-json/-/dummy-json-0.0.2.tgz",
  "bugs": {
    "url": "https://github.com/webroo/dummy-json/issues"
  }
}
